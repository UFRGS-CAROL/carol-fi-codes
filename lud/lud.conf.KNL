[DEFAULT]

debug = False

# Name of the gdb executable, usualy is "gdb-mic" for Xeon Phi
gdbExecName = gdb

# How many interrupt signals to send sequentially
seqSignals = 1

# How many random threads will attempt to send interrupt signals
numThreadsFI = 1

# Which fault model to use, 0 -> single; 1 -> double; 2 -> random; 3 -> zeros; 4 -> least significant bits (LSB)
faultModel = 4

################### LUD general ###################

goldFile = /home/dagoliveira/carol-fi/codes/lud/lud-knl-files-2017-11-21/gold_4096_th_272
outputFile = /tmp/lud_output_4096_th_272

# Commands to set the session inside GDB environment
gdbInitStrings = file /home/dagoliveira/carol-fi/codes/lud/lud-knl-files-2017-11-21/lud;set args -s 4096 -n 272 -i /home/dagoliveira/carol-fi/codes/lud/lud-knl-files-2017-11-21/input_4096_th_272 -o /tmp/lud_output_4096_th_272

# Shell command to send SIGINT to the application being tested
signalCmd = killall -2 lud

# Kill commands to exit all applications (GDB and the application tested)
# Need to ensure safe termination before another fault injection test
killStrs = killall -9 gdb;killall -9 lud

# How many interrupt signals to send sequentially
seqSignals = 5
# How many random threads will attempt to send interrupt signals
numThreadsFI = 3

# Max time to send signal. It should be the app exec time in seconds
maxWaitTime = 30


################### LUD specific setups  ###################
[lud-single-0-4]
# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 4
faultModel = 0

[lud-single-4-8]
# Start and end time to try randomly inject a fault
initSignal = 4
endSignal = 8
faultModel = 0

[lud-single-8-12]
# Start and end time to try randomly inject a fault
initSignal = 8
endSignal = 12
faultModel = 0

[lud-single-12-16]
# Start and end time to try randomly inject a fault
initSignal = 12
endSignal = 16
faultModel = 0

[lud-double-0-4]
# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 4
faultModel = 1

[lud-double-4-8]
# Start and end time to try randomly inject a fault
initSignal = 4
endSignal = 8
faultModel = 1

[lud-double-8-12]
# Start and end time to try randomly inject a fault
initSignal = 8
endSignal = 12
faultModel = 1

[lud-double-12-16]
# Start and end time to try randomly inject a fault
initSignal = 12
endSignal = 16
faultModel = 1

[lud-random-0-4]
# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 4
faultModel = 2

[lud-random-4-8]
# Start and end time to try randomly inject a fault
initSignal = 4
endSignal = 8
faultModel = 2

[lud-random-8-12]
# Start and end time to try randomly inject a fault
initSignal = 8
endSignal = 12
faultModel = 2

[lud-random-12-16]
# Start and end time to try randomly inject a fault
initSignal = 12
endSignal = 16
faultModel = 2

[lud-zero-0-4]
# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 4
faultModel = 3

[lud-zero-4-8]
# Start and end time to try randomly inject a fault
initSignal = 4
endSignal = 8
faultModel = 3

[lud-zero-8-12]
# Start and end time to try randomly inject a fault
initSignal = 8
endSignal = 12
faultModel = 3

[lud-zero-12-16]
# Start and end time to try randomly inject a fault
initSignal = 12
endSignal = 16
faultModel = 3

[lud-lsb-0-4]
# Start and end time to try randomly inject a fault
initSignal = 0
endSignal = 4
faultModel = 4

[lud-lsb-4-8]
# Start and end time to try randomly inject a fault
initSignal = 4
endSignal = 8
faultModel = 4

[lud-lsb-8-12]
# Start and end time to try randomly inject a fault
initSignal = 8
endSignal = 12
faultModel = 4

[lud-lsb-12-16]
# Start and end time to try randomly inject a fault
initSignal = 12
endSignal = 16
faultModel = 4
