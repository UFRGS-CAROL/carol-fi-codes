[DEFAULT]

debug = False

# Name of the gdb executable
gdbExecName = /usr/local/cuda/bin/cuda-gdb

# Which fault model to use, 0 -> single; 1 -> double;
# 2 -> random; 3 -> zeros; 4 -> least 16 significant bits (LSB);
# 5 -> least 8 significant bits (LSB)
# If you want multiple fault models, place them separated by ','
# faultModel = 0,2,3
faultModel = 0

# Injection site
# Can be:
# RF -> Register File
# INST_OUT -> Instruction Output (NOT IMPLEMENTED YET)
# INST_ADD -> Instruction Adress (NOT IMPLEMENTED YET)
injectionSite = RF


# Max time factor to finish the app, this will be multiplied by the application running time
# For example if your app spend 2s, and the maxWaitTimes is 5, the max running time before it is
# Considered as a crash is 10s
maxWaitTimes = 5

# binary file of the application
# Must be full path
benchmarkBinary = /home/carol/carol-fi/carol-fi-codes/hotspot/cuda_hotspot_single

# Commands to set the session inside GDB environment
benchmarkArgs = -size=1024 -sim_time=10000 -iterations=10 -verbose -input_power=/home/carol/carol-fi/carol-fi-codes/data/hotspot/power_1024             -input_temp=/home/carol/carol-fi/carol-fi-codes/data/hotspot/temp_1024 -gold_temp=/home/carol/carol-fi/carol-fi-codes/data/hotspot/gold_temp_single_1024_10000

# CSV output file. It will be overwrite at each injection
csvFile = ./hotspot_single_bit_flip.csv

# YOU SHOULD NOW CREATE A SCRIPT ON BENCHMARK SOURCE TO VERIFY THE GOLD OUTPUT x INJ_OUTPUT
# it must contains a function called sdc_check and must return True or False
# True for masked
# False for SDC
goldenCheckScript = carol-fi-codes/lava_mp/sdc_check.sh

seqSignals = 20

initSleep = 0
